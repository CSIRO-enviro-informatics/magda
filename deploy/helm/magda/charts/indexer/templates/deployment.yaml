apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: indexer
spec:
  replicas: {{ .Values.replicas | default 1 }}
  strategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.global.rollingUpdate.maxUnavailable | default 0 }}
  template:
    metadata:
      labels:
        service: indexer
    spec:
      containers:
      - name: indexer
        env:
        - name: S3_SECRET_KEY
          value: dummy
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret
        {{- if not .Values.global.noDbAuth }}
        - name: ELASTIC_SEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-passwords
              key: elasticsearch
        {{- end }}
        livenessProbe:
          httpGet:
            path: /v0/reindex/in-progress
            port: 80
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
{{ toYaml .Values.resources | indent 10 }}
        image: {{ template "dockerimage" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
        command: [
            "/app/bin/magda-indexer",
            "-Dhttp.port=80",
            "-Dregistry.webhookUrl=http://indexer/v0/registry-hook",
            "-Dregistry.baseUrl=http://registry-api",
            "-Dindexer.readSnapshots=true",
            "-Dindexer.makeSnapshots=true",
            "-Dakka.loglevel={{ .Values.logLevel | default .Values.global.logLevel }}",
            "-DelasticSearch.serverUrl=elasticsearch://elasticsearch:9300",
{{- if .Values.elasticsearch.useGcsSnapshots }}
            "-DelasticSearch.snapshotRepo.type=gcs",
            "-DelasticSearch.snapshotRepo.types.gcs.bucket={{ .Values.elasticsearch.gcsSnapshotBucket }}",
            "-DelasticSearch.snapshotRepo.types.gcs.service_account={{ .Values.elasticsearch.gcsSnapshotServiceAccount }}",
{{- end }}
            "-DelasticSearch.shardCount={{ .Values.elasticsearch.shards }}",
            "-DelasticSearch.replicaCount={{ .Values.elasticsearch.replicas }}",
            "-Dauth.userId={{ .Values.global.defaultAdminUserId }}"
        ]
        volumeMounts:
        - mountPath: /usr/regions
          name: regions
      volumes:
      - name: regions
        hostPath:
          path: /var/regions
